{"remainingRequest":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/src/views/curso/Tema3.vue?vue&type=template&id=ea984e98&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/src/views/curso/Tema3.vue","mtime":1745981670724},{"path":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Practica_Pedagogica_II/U3_Practica_Pedagogica_II/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}